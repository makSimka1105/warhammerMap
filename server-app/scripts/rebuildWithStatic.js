const fs = require('fs-extra');
const { execSync } = require('child_process');
const { writeFileSync } = require('fs');
const { resolve } = require('path');

async function buildAndCopyStatic() {
  const TEMP_DIR = './.temp_static_backup';
  const DIST_STATIC = './dist/static';

  try {
            if(!fs.existsSync(TEMP_DIR)){
                        await fs.mkdirSync(TEMP_DIR)
            }
    // 1. –ö–æ–ø–∏—Ä—É–µ–º static –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
    if (fs.existsSync(DIST_STATIC)) {
            
      await fs.copy(DIST_STATIC, TEMP_DIR);
      console.log('üìÇ backup: Copied static ‚Üí', TEMP_DIR);
    }

    // 2. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É Nest (–æ—á–∏—â–∞–µ—Ç dist)
    console.log('‚öôÔ∏è  Building Nest...');
    execSync('nest build', { stdio: 'inherit' });
    console.log('‚úÖ Build completed.');

    // 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º static –≤ dist
    if (fs.existsSync(TEMP_DIR)) {
      await fs.copy(TEMP_DIR, DIST_STATIC);
      await fs.remove(TEMP_DIR); // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
      console.log('üìÇ restore: Copied', TEMP_DIR, '‚Üí', DIST_STATIC);

    }
  } catch (err) {
    console.error('‚ùå Error:', err);
    process.exit(1);
  }
}

buildAndCopyStatic();
